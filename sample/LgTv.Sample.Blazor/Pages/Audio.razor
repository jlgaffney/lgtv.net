@page "/audio"
@inject ILgTvClientController Controller

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Audio</MudText>
    </MudCardHeader>
    
    <MudCardContent>
        @if (_soundOutput == null)
        {
            <MudProgressLinear Indeterminate />
        }
        else
        {
            <MudField Label="Output">@_soundOutput</MudField>
        }
    </MudCardContent>
    
    <MudCardActions>
        <MudStack Row Spacing="1">
            <MudIconButton Icon="@(_isMuted ? Icons.Material.Filled.VolumeMute : Icons.Material.Filled.VolumeOff)" Title="@(_isMuted ? "Unmute" : "Mute")" OnClick="ToggleMute" />
            
            <MudIconButton Icon="@Icons.Material.Filled.VolumeDown" Title="Decrease Volume" OnClick="Controller.Client.Audio.VolumeDown" />
            <MudIconButton Icon="@Icons.Material.Filled.VolumeUp" Title="Increase Volume" OnClick="Controller.Client.Audio.VolumeUp" />
        </MudStack>
    </MudCardActions>
</MudCard>

@code {
    private bool _isMuted;

    private string _soundOutput;

    protected override async Task OnInitializedAsync()
    {
        _isMuted = await Controller.Client.Audio.IsMuted();

        _soundOutput = await Controller.Client.Audio.GetOutput();
    }

    private async Task ToggleMute()
    {
        await Controller.Client.Audio.SetMute(!_isMuted);

        _isMuted = !_isMuted;
    }
}
