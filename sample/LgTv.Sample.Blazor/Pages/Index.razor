@page "/"
@inject ILgTvClientController Controller

<MudCard>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Activity</MudText>
    </MudCardHeader>

    @if (_app == null)
    {
        <MudCardContent>
            <MudText Typo="Typo.h6">Unknown</MudText>
        </MudCardContent>
    }
    else
    {
        <MudCardContent>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudImage Alt="@($"{_app.Title} Icon")" Src="@_app.Icon" Width="40" Height="40" Elevation="3"
                          Style="@($"background: {(!string.IsNullOrWhiteSpace(_app.IconColorHex) ? _app.IconColorHex : "black")}")"/>
                <MudText Typo="Typo.h6">@_app.Title</MudText>
            </MudStack>
        </MudCardContent>

        <MudCardActions>
            <MudButton StartIcon="@Icons.Material.Filled.Close" OnClick="CloseCurrentApp">Close</MudButton>
        </MudCardActions>
    }
</MudCard>

@code {
    private LgTv.Clients.Apps.App _app;

    protected override async Task OnInitializedAsync()
    {
        if (Controller.IsConnected)
        {
            await LoadCurrentApp();
        }
    }

    private async Task LoadCurrentApp()
    {
        _app = null;

        var foregroundAppInfo = await Controller.Client.Apps.GetForegroundAppInfo();
        if (foregroundAppInfo == null)
        {
            return;
        }

        _app = await Controller.Client.Apps.GetApp(foregroundAppInfo.AppId);
    }

    private async Task CloseCurrentApp()
    {
        if (_app == null)
        {
            return;
        }

        await Controller.Client.Apps.CloseApp(_app.Id);

        await LoadCurrentApp();
    }
}
