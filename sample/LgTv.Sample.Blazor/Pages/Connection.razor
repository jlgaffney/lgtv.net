@page "/connection"
@inject ILgTvClientController Controller
@inject HttpClient HttpClient
@inject IOptions<ProxyHostConfiguration> ProxyHostConfiguration
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Connection</PageTitle>

@if (Controller.IsConnected)
{
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Connection</MudText>
        </MudCardHeader>

        <MudCardContent>
	        <MudField Label="Host">@Controller.Client.Configuration.Tv.Host</MudField>

            <MudField Label="Port">@Controller.Client.Configuration.Tv.Port</MudField>
        </MudCardContent>

        <MudCardActions>
            <MudButton StartIcon="@Icons.Material.Filled.LinkOff" OnClick="Disconnect">Disconnect</MudButton>
        </MudCardActions>
    </MudCard>
    return;
}

<MudStack Spacing="4">
    <MudText Typo="@Typo.h4" GutterBottom>Connect</MudText>
    
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Details</MudText>
        </MudCardHeader>
    
        <MudCardContent>
	        <MudTextField Label="Host" @bind-Value="_host" AutoFocus />

            <MudNumericField Label="Port" @bind-Value="_port" />
        </MudCardContent>
    
        <MudCardActions>
            <MudButton StartIcon="@Icons.Material.Filled.Link" OnClick="Connect">Connect</MudButton>
        </MudCardActions>
    </MudCard>
    
     @if (_availableDevices == null)
    {
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5">Available Devices</MudText>
            </MudCardHeader>
    
            <MudCardContent>
                <MudProgressLinear Indeterminate />
            </MudCardContent>
        </MudCard>
    }
    else
    {
        <MudDataGrid T="Device" Items="_availableDevices" RowStyle="cursor: pointer" Hover RowClick="x => SetConnectionDetails(x.Item)"
                      Loading="_availableDevices == null" LoadingProgressColor="Color.Inherit">
            <ToolBarContent>
                <MudText Typo="Typo.h5">Available Devices</MudText>
            </ToolBarContent>

            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name"/>
                <PropertyColumn Property="x => x.IpAddress" Title="IP Address"/>
            </Columns>

            <NoRecordsContent>
                <MudText Typo="Typo.subtitle1">None</MudText>
            </NoRecordsContent>

            <PagerContent>
                 <MudButton Class="ma-2" StartIcon="@Icons.Material.Filled.Refresh" OnClick="LoadAvailableDevices">Refresh</MudButton>
            </PagerContent>
        </MudDataGrid>
    }
</MudStack>

@code {
    private const string HttpScheme = "http";
    private const string HttpsScheme = "https";

    private IReadOnlyList<Device> _availableDevices;

    private string _host;
    private int _port = LgTvClient.DefaultPort;
    
    protected override async Task OnInitializedAsync()
    {
        if (!Controller.IsConnected)
        {
            await LoadAvailableDevices();
        }
    }
    
    private async Task Connect()
    {
        if (!_host.IsIPAddress())
        {
            await DialogService.ShowMessageBox("Unable To Connect", "Host IP address is invalid");
            return;
        }

        await WakeOnLanDevice(_host);

        var tvHostConfiguration = new HostConfiguration
        {
            Host = _host,
            Port = _port
        };

        await Controller.Connect(tvHostConfiguration);

        NavigationManager.NavigateTo(string.Empty);
    }

    private async Task Disconnect()
    {
        Controller.Disconnect();

        await LoadAvailableDevices();
    }

    private async Task LoadAvailableDevices()
    {
        _availableDevices = null;

        var url = new UriBuilder(
            ProxyHostConfiguration.Value.Secure ? HttpsScheme : HttpScheme,
            ProxyHostConfiguration.Value.Endpoint.Host,
            ProxyHostConfiguration.Value.Endpoint.Port,
            "scan")
            .ToString();
        
        var availableHosts = await HttpClient.GetFromJsonAsync<IReadOnlyList<Device>>(url);

	    _availableDevices = availableHosts?.ToArray() ?? Array.Empty<Device>();
    }

    private async Task WakeOnLanDevice(string ipAddress)
    {
        var url = new UriBuilder(
            ProxyHostConfiguration.Value.Secure ? HttpsScheme : HttpScheme,
            ProxyHostConfiguration.Value.Endpoint.Host,
            ProxyHostConfiguration.Value.Endpoint.Port,
            FormattableString.Invariant($"wakeonlan/{ipAddress}"))
            .ToString();
        
        await HttpClient.PostAsync(url, null);
    }

    private void SetConnectionDetails(Device device)
    {
	    _host = device?.IpAddress ?? string.Empty;
    }
}
