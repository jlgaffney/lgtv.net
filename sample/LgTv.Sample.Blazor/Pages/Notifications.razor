@page "/notifications"
@inject IClientController Controller
@inject HttpClient HttpClient

<PageTitle>Notifications</PageTitle>

<MudCard>
	<MudCardHeader>
        <MudText Typo="Typo.h5">Notifications</MudText>
	</MudCardHeader>

	<MudCardContent>
		<MudTextField Label="Toast Message" @bind-Value="_toastMessage" AutoFocus />
        
		<br />
        
		<MudCheckBox T="bool" Label="Show With Icon" @bind-Checked="_showWithIcon" />
        @if (_showWithIcon)
		{
			<MudTextField Label="Icon URL" @bind-Value="_iconUrl" AutoFocus />
		}
	</MudCardContent>
    
	<MudCardActions>
		<MudStack Row Spacing="1">
			<MudButton OnClick="ShowToast">Show Toast</MudButton>
		</MudStack>
	</MudCardActions>
</MudCard>

@code {
    private string _toastMessage;

    private bool _showWithIcon;
    private string _iconUrl;

    private async Task ShowToast()
    {
        if (string.IsNullOrWhiteSpace(_toastMessage))
        {
            return;
        }

        if (_showWithIcon && !string.IsNullOrWhiteSpace(_iconUrl))
        {
            var iconData = await HttpClient.GetByteArrayAsync(_iconUrl);

            var iconExtension = Path.GetExtension(_iconUrl).TrimStart('.');

            await Controller.Client.Notifications.ShowToast(_toastMessage, iconData, iconExtension);
        }
        else
        {
            await Controller.Client.Notifications.ShowToast(_toastMessage);
        }
    }
}
