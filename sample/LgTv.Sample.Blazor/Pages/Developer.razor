@page "/developer"
@inject ILgTvClientController Controller

<PageTitle>Developer</PageTitle>

<MudStack Spacing="4">
    <MudText Typo="@Typo.h4" GutterBottom>Developer</MudText>

	<MudCard>
		<MudCardHeader>
			<MudText Typo="Typo.h5">Request</MudText>
		</MudCardHeader>

		<MudCardContent>
			<MudTextField Label="Prefix" @bind-Value="_prefix" Style="font-family: 'Courier New', monospace" />
            
			<MudTextField Label="URI" @bind-Value="_uri" Style="font-family: 'Courier New', monospace" />

			<MudTextField Label="Payload JSON" @bind-Value="_payloadJson" AutoGrow Lines="GetLineCount(DefaultPayloadJson)" MaxLines="10"
			              Style="font-family: 'Courier New', monospace" />
		</MudCardContent>
		
		<MudCardActions>
			<MudButton OnClick="SendCommand">Send Command</MudButton>
		</MudCardActions>
	</MudCard>
    
	@if (!string.IsNullOrWhiteSpace(_responseJson))
	{
		<MudCard>
	        <MudCardHeader>
	            <MudText Typo="Typo.h5">Response</MudText>
	        </MudCardHeader>
            
			<MudCardContent>
				<MudTextField Label="Response JSON" Value="@_responseJson" Lines="@Math.Min(20, GetLineCount(_responseJson))" ReadOnly
				              Style="font-family: 'Courier New', monospace" />
			</MudCardContent>
	    </MudCard>
	}
</MudStack>

@code {
    private const string DefaultPayloadJson = @"{
  
}";

    private string _prefix;
    private string _uri;
    private string _payloadJson = DefaultPayloadJson;

    private string _responseJson;

    private async Task SendCommand()
    {
        if (string.IsNullOrWhiteSpace(_uri))
        {
            return;
        }

        var payload = string.IsNullOrWhiteSpace(_payloadJson) ? DefaultPayloadJson : _payloadJson;

        RequestMessage request;
        if (!string.IsNullOrWhiteSpace(_prefix))
        {
            request = new RequestMessage(_prefix, _uri);
            request.SetPayload(payload);
        }
        else
        {
            request = new RequestMessage(_uri, (object) payload);
        }

        _responseJson = null;

        var response = await Controller.Client.SendCommand(request);

        _responseJson = JsonConvert.SerializeObject(response, Formatting.Indented);
    }

	private static int GetLineCount(string content)
	{
		return content.Split("\n").Length;
	}
}
